#include <iostream>
#include <cstring>
#include<queue>
using namespace std;

class node{
    public:
        int data;
        node*left;
        node*right;
        
        node(int d){
            data=d;
            left=NULL;
            right=NULL;
        }
};

node* buildTree(){
    int d;
    cin>>d;
    if(d==-1){
        return NULL;
    }
    node*root=new node(d);
    root->left=buildTree();
    root->right=buildTree();
    
    return root;
}

void print(node*root){
    if(root==NULL){
        return;
    }
    //otherwise print root first followed by subtrees(children)
    cout<<root->data<<" ";
    print(root->left);
    print(root->right);
}

void printIn(node*root){
    if(root==NULL){
        return;
    }
    //otherwise pattern is Left Root right
    printIn(root->left);
    cout<<root->data<<" ";
    printIn(root->right);
}

void printPost(node*root){
    if(root==NULL){
        return;
    }
    //otherwise pattern is left right root
    printPost(root->left);
    printPost(root->right);
    cout<<root->data<<" ";
}
int count(node*root){
    if(root==NULL){
        return 0;
    }
    return 1+count(root->left)+count(root->right);
}

int height(node*root){
    if(root==NULL){
        return 0;
    }
    int ls=height(root->left);
    int rs=height(root->right);
    return max(ls,rs)+1;
}
void printKthLevelNode(node*root,int k){
    if(root==NULL){
        return;
    }
    if(k==1){
        cout<<root->data<<" ";
        return;
    }
    printKthLevelNode(root->left,k-1);
    printKthLevelNode(root->right,k-1);
    return;
}
void bfs(node*root){
    queue<node*> q;
    q.push(root);
    
    while(!q.empty()){
        node*f=q.front();
        cout<<f->data<<",";
        q.pop();
        if(f->left){
            q.push(f->left);
        }
        if(f->right){
            q.push(f->right);
        }
    }
    return;
}

void printAllLevels(node*root){
    int H=height(root);
    for(int i=1;i<=H;i++){
        printKthLevelNode(root,i);
        cout<<endl;
    }
    return;
}

int main() {  

node*root=buildTree();

print(root);
cout<<endl;
printIn(root);
cout<<endl;
printPost(root);
cout<<endl;
cout<<height(root)<<endl;
cout<<count(root)<<endl;
printKthLevelNode(root,2);
cout<<endl;
printAllLevels(root);
cout<<endl;
bfs(root);

return 0;    
}