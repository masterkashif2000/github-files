///NOTES

KARATSUBA ALGORITHM

#include<iostream>
#include<string>
#include<cmath>
using namespace std;

int multiply(string s1, string s2){
    int l1 = s1.length() - 1, l2 = s2.length() - 1;
    int i, p1 = 0, p2 = 0;
    int t1 = 0;
    for(i = s1.length() - 1; i >= 0 && t1 <= l1; i--, t1++){
        if(s1[i] == '1'){
            p1 += pow(2, t1);
        }
    }
    t1 = 0;
    for(i = s2.length() - 1; i >= 0 && t1 <= l2; i--, t1++){
        if(s2[i] == '1'){
            p2 += pow(2, t1);
        }
    }

    return p1 * p2;
}

int main(){
    int test;
    cin >> test;
    while(test--){
        string s1, s2;

        cin >> s1 >> s2;

        int ans = multiply(s1, s2);
        cout << ans;
        cout << endl;
    }
}


2
1100 01
01 01


SEQUENCE OF SEQUENCE

int main() {
	int t;
	cin>>t;
	while(t--)
	{
	    int m,n;
	    long long sum = 0,A[102][102]={0};
	    cin>>m>>n;
	    if(n>7)
	    {
	        cout<<0<<endl;
	        continue;
	    }
	    if(n==1)
        {
            cout<<m<<endl;
            continue;
        }
	    int r = int(pow(2,n-1));
	    if(m < r)
	    {
	        cout<<0<<endl;
	        continue;
	    }

	    for(int i=m;i>=r;i--)
        {
            A[i][n] = m-i+1;
        }
	    for(int i=n-1;i>0;i--)
        {
            m/=2; r/=2;
            for(int j=m;j>=r;j--)
            {
                A[j][i] = A[j+1][i] + A[2*j][i+1];
            }
        }
	    cout<<A[1][1]<<endl;
	}
	return 0;
}





modular exponentiation for large numbers;;;


ll modexp(ll a,ll b,ll c){
    if(a==1 || b==1){
        return a;
    }
    if(b%2==0){
        return modexp((a%c*a%c)%c,b/2,c);
    }
    else{
        return (a%c*modexp((a%c*a%c)%c,b/2,c)%c)%c;
    }
}

int main()
 {
	ll t;
	cin>>t;
	while(t--){
	    ll a,b,c;
	    cin>>a>>b>>c;
	    cout<<modexp(a,b,c)<<endl;
	}
	return 0;
}


method 2::::

using namespace std;

int main() {
	//code
	int t;
	cin>>t;
	while(t--)
	{
	    int a,b,c;
	    cin>>a>>b>>c;
	    int sum=1;
	    while(b>0)
	    {
	        sum=(sum*a)%c;
	        b--;
	    }
	    cout<<sum<<endl;
	}
	return 0;
}

method 3:::::

using namespace std;
int find_mod(int a,int b,int c)
{
    if(a==0)
    return 0;
    if(b==0)
    return 1;
    else if(b%2==0)
    {
        long small_ans=find_mod(a,b/2,c);
        long ans=(small_ans*small_ans)%c;
        return int(ans);
    }
    else
    {
        long small_ans=find_mod(a,b-1,c);
        long ans=a%c;
        ans=(ans*small_ans)%c;
        return int(ans);
    }
}
int main()
 {
	//code
	int T;
	cin>>T;
	while(T--)
	{
	    long A,B,C;
	    cin>>A>>B>>C;
	    
	    int result=find_mod(A,B,C);
	    cout<<result<<"\n";
	}
	return 0;
}
method 4::::

using namespace std;

long power(long x, long y, long c){
    long res = 1;     
    while (y > 0){
        if (y & 1)
            res = ((res % c)* (x % c)) % c;
        y = y>>1; 
        x = ((x % c) * (x % c));
    }
    return res % c;
}


int main(){
    int test;
    cin >> test;
    while(test--){
        long a, b, c;
        cin >> a >> b >> c;
        cout << power(a, b, c);
        cout << endl;
    }
}
Input:

3
3 2 4
10 9 6
450 768 517

Output:

1
4
34

///FIND THE ELEMENT THAT APPEARS ONCE IN AN ARRAY

using namespace std;

int main() {
	//code
	int t;
	cin>>t;
	
	while(t--){
	    int n;
	    cin>>n;
	    
	    vector<int> v;
	    int ans = 0;
	    for(int i=0;i<n;i++){
	        int digit;
	        cin>>digit;
	        v.push_back(digit);
	        ans = ans^digit;
	    }
	    cout<<ans<<endl;
	}
	return 0;
}

method 2;;
#include<bits/stdc++.h>
using namespace std;
#define f(in,n) for(int i=in;i<n;i++)
int main()
 {
	int q,n,num=0,m,p;
	cin>>q;
	while(q--)
	{
	    num=INT_MIN;
	    cin>>n;
	    f(0,n)
	    {
	        cin>>m;
	        if(i&1 && num==INT_MIN)
	        {
	            if(m!=p)
	            num=p;
	        }
	        else
	        p=m;
	    }
	    if(num==INT_MIN)
	    cout<<m<<endl;
	    else
	    cout<<num<<endl;
	}
	return 0;
}





Kth Elements of two Sorted Arrays////////////////////

#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
typedef long long int ll;
int main() {
    ll t,n,m,k;
    cin>>t;
    while(t--){
        cin>>n>>m>>k;
        vector<int> v;
      
        for(ll i=0;i<n;i++){
            ll num;
            cin>>num;
            v.push_back(num);
        }
        for(ll i=0;i<m;i++){
            ll num;
            cin>>num;
            v.push_back(num);
        }
        sort(v.begin(),v.end());
        cout<<v[k-1]<<endl;
    }
}



